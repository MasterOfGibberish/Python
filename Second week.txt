
#Simple Function
def greet():
  print("Hello Angela")
  print("How do you do Jack Bauer?")
  print("Isn't the weather nice today?")
greet()

#Function that allows for input
#'name' is the parameter.
#'Jack Bauer' is the argument.
def greet_with_name(name):
  print(f"Hello {name}")
  print(f"How do you do {name}?")
greet_with_name("Jack Bauer")

#Functions with more than 1 input
def greet_with(name, location):
  print(f"Hello {name}")
  print(f"What is it like in {location}?")
  
#Calling greet_with() with Positional Arguments
greet_with("Jack Bauer", "Nowhere")
#vs.
greet_with("Nowhere", "Jack Bauer")


#Calling greet_with() with Keyword Arguments
greet_with(location="London", name="Angela")
    
/////////////////////////////////////////////////////

def greet_with_name(name):
  print(f"Hello {name}")
  print(f"How do you do {name}?")
greet_with_name(input("what is your name?\n"))

//////////////////////////////////////////////

import math
def paint_calc(height,width,cover):
  number_of_cans=height*width/cover
  print(math.ceil(number_of_cans))
# Define a function called paint_calc() so that the code below works.   

test_h = int(input("Height of wall: "))
test_w = int(input("Width of wall: "))
coverage = 5
paint_calc(height=test_h, width=test_w, cover=coverage)
//////////////////////////////////////////////////////////

def prime_checker(number):
  is_prime_number=True
  for x in range(2,number):
      if number%x!=0:
       is_prime_number=False
  if is_prime_number==True:
   print(f"{n} is not prime")
  else:
    print(f"{n} is prime")

n = int(input("Check this number: "))
prime_checker(number=n)

/////////////////////////////////////////////////////////

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

def caesar(start_text, shift_amount, cipher_direction):
  end_text = ""
  if cipher_direction == "decode":
    shift_amount *= -1
  for char in start_text:
   
    if char in alphabet:
      position = alphabet.index(char)
      new_position = position + shift_amount
      end_text += alphabet[new_position]
    else:
      end_text += char
  print(f"Here's the {cipher_direction}d result: {end_text}")

#from art import logo
#print(logo)

should_end = False
while not should_end:

  direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
  text = input("Type your message:\n").lower()
  shift = int(input("Type the shift number:\n"))
 
  shift = shift % 26

  caesar(start_text=text, shift_amount=shift, cipher_direction=direction)

  restart = input("Type 'yes' if you want to go again. Otherwise type 'no'.\n")
  if restart == "no":
    should_end = True
    print("Goodbye")
    
////////////////////////////////////////////////////////////////////

programming_dictionary = {
  "Bug": "An error in a program that prevents the program from running as expected.", 
  "Function": "A piece of code that you can easily call over and over again.",
  "Oil": "Too expensive",
}

#Retriving items from Dictionary
print(programming_dictionary["Function"])

#Adding information to dictionary
programming_dictionary["CarWay"]="the road"
print(programming_dictionary)

#Creating and cleaning dictionaries
empty_dictionary={}

#Editing dictionaries
programming_dictionary["Bug"]="it is an error"

#Loop through the dictionary
for key in programming_dictionary:
  print(key)
  print(programming_dictionary[key])


////////////////////////////////////////
  
student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99, 
  "Draco": 74,
  "Neville": 62,
}


#TODO-1: Create an empty dictionary called student_grades.
student_grades = {}


for students in student_scores:
  score=student_scores[students]
  if score > 90:
    student_grades[students]="Outstanding"
  elif score > 80:
    student_grades[students]="exceedingly well"
  elif score > 70:
    student_grades[students]="average"
  else: 
    student_grades[students]="Failer!"

print(student_grades)

////////////////////////////////////////////////////

#Nesting
capitals={
  "France":"Paris",
  "Germany":"Berlin",
}

#Nesting a List in the Dictionariy
Cities_In_Countries={
  "France": ["Paris", "Dijon", "Lilie"],
  "Germany":["Berlin", "Hamburg", "Dortmund"],
}

#Nesting Dictionary in a Dictionary
Cities_In_Countries={
  "France": {"countries that I visited": ["Paris", "Dijon", "Lilie"],"total visits": 12},
  "Germany":{"Countries that I visited": ["Berlin", "Hamburg", "Dortmund"], "total visits": 11},
}

#Nesting Dictionary in a List
Cities_In_Countries={
  {"Country": "France", "countries that I visited": ["Paris", "Dijon", "Lilie"],"total visits": 12},
  {"Country": "Germany", "Countries that I visited": ["Berlin", "Hamburg", "Dortmund"], "total visits": 11},
}

////////////////////////////////////////////////

travel_log = [
{
  "country": "France",
  "visits": 12,
  "cities": ["Paris", "Lille", "Dijon"]
},
{
  "country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]

#TODO: Write the function that will allow new countries
#to be added to the travel_log. ðŸ‘‡
def add_new_country(country_visited, times_visited, cities_visited):
  new_country={}
  new_country["country"]=country_visited
  new_country["visits"]=times_visited
  new_country["cities"]=cities_visited
  travel_log.append(new_country)


add_new_country("Lithuania", 2, ["Kaunas", "Panevezys"])
print(travel_log)
//////////////////////////////////
from replit import clear
#from art import logo
#print(logo)

bids = {}
bidding_finished = False

def find_highest_bidder(bidding_record):
  highest_bid = 0
  winner = ""
  # bidding_record = {"Angela": 123, "James": 321}
  for bidder in bidding_record:
    bid_amount = bidding_record[bidder]
    if bid_amount > highest_bid: 
      highest_bid = bid_amount
      winner = bidder
  print(f"The winner is {winner} with a bid of ${highest_bid}")

while not bidding_finished:
  name = input("What is your name?: ")
  price = int(input("What is your bid?: $"))
  bids[name] = price
  should_continue = input("Are there any other bidders? Type 'yes or 'no'.\n")
  if should_continue == "no":
    bidding_finished = True
    find_highest_bidder(bids)
  elif should_continue == "yes":
  clear()

/////////////////////////////////////////////////

def format_name(f_name, l_name):
  if f_name=="" or l_name=="":
    return "You did not provide any of imputs"
  formated_f_name=f_name.title()
  formated_l_name=l_name.title()
  return f"Results: {formated_f_name} {formated_l_name}"

print(format_name(input("What is your name? "), input("What is your last name? ")))

/////////////////////////////////////////////////////


def is_leap(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False


def days_in_month(year, month):
    if month > 12 or month < 1:
        return "Sorry, invalid input"
    if year < 1:
        return "Sorry, invalid input"
    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if is_leap(year) and month == 2:
        return 29
    return month_days[month - 1]
  
year = int(input("Enter a year: "))
month = int(input("Enter a month: "))
days = days_in_month(year, month)
print(days)

////////////////////////////////////
def Docstring():
  """Writes: Hello World!"""
  print("hello world!")

Docstring()
/////////////////////////////////////

#Calculator

#Adding
def Adding(n1, n2):
    return n1 + n2

#Subtract
def Subtract(n1, n2):
  return n1 - n2
  
#Multiply
def Multiply(n1,n2):
  return n1 * n2
  
#Divide
def Divide(n1,n2):
  return n1 / n2

operations = {
  "+": Adding,
  "-": Subtract,
  "*": Multiply,
  "/": Divide,
}

num1 = int(input("What is first number? "))
#num2 = int(input("What is next number? "))
for symbol in operations:
  print(symbol)
should_continue=True
while should_continue:
  operation_symbol=input("Pick the operation: ")
  num2 = int(input("What is next number? "))
  calculation_function= operations[operation_symbol]
  answer=calculation_function(num1, num2)
  print(f"{num1} {operation_symbol} {num2} = {answer}")
  choice=input("Type y to continue calculating with {answer} or type n to end: ")
  if choice=="y":
    num1=answer
  else:
    should_continue=False  
    

